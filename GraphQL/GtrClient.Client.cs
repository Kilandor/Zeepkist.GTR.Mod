extern alias MemoryAlias;
// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public static partial class GtrClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::TNRD.Zeepkist.GTR.State.GtrClientStoreAccessor> AddGtrClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::TNRD.Zeepkist.GTR.State.GtrClientStoreAccessor());
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetAdditionalGhostsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetLevelPointsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestCountQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestGhostsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPlayerRankOnLevelQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetTotalUserCountQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetWorldRecordHolderQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GtrClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGtrClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::TNRD.Zeepkist.GTR.State.GtrClientStoreAccessor>("GtrClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GtrClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("BigFloat"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>, global::TNRD.Zeepkist.GTR.State.GetAdditionalGhostsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>, global::TNRD.Zeepkist.GTR.State.GetAdditionalGhostsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetAdditionalGhostsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetAdditionalGhostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>, global::TNRD.Zeepkist.GTR.State.GetLevelPointsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>, global::TNRD.Zeepkist.GTR.State.GetLevelPointsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetLevelPointsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetLevelPointsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetPersonalBestQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestCountResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestCountBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetPersonalBestCountQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestCountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestGhostsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestGhostsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetPersonalBestGhostsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestGhostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>, global::TNRD.Zeepkist.GTR.State.GetPersonalBestsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetPersonalBestsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPersonalBestsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>, global::TNRD.Zeepkist.GTR.State.GetPlayerRankOnLevelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>, global::TNRD.Zeepkist.GTR.State.GetPlayerRankOnLevelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetPlayerRankOnLevelQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetPlayerRankOnLevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>, global::TNRD.Zeepkist.GTR.State.GetTotalUserCountResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>, global::TNRD.Zeepkist.GTR.State.GetTotalUserCountBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetTotalUserCountQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetTotalUserCountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>, global::TNRD.Zeepkist.GTR.State.GetWorldRecordHolderResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>, global::TNRD.Zeepkist.GTR.State.GetWorldRecordHolderBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GetWorldRecordHolderQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GetWorldRecordHolderQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.GtrClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TNRD.Zeepkist.GTR.IGtrClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TNRD.Zeepkist.GTR.GtrClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace TNRD.Zeepkist.GTR
{
    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsResult : global::System.IEquatable<GetAdditionalGhostsResult>, IGetAdditionalGhostsResult
    {
        public GetAdditionalGhostsResult(global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals? PersonalBestGlobals { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhostsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PersonalBestGlobals is null && other.PersonalBestGlobals is null) || PersonalBestGlobals != null && PersonalBestGlobals.Equals(other.PersonalBestGlobals)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhostsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PersonalBestGlobals != null)
                {
                    hash ^= 397 * PersonalBestGlobals.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection : global::System.IEquatable<GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection>, IGetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection
    {
        public GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal : global::System.IEquatable<GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal>, IGetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal
    {
        public GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal(global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record? @record)
        {
            Record = @record;
        }

        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record? Record { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Record is null && other.Record is null) || Record != null && Record.Equals(other.Record)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Record != null)
                {
                    hash ^= 397 * Record.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record : global::System.IEquatable<GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record>, IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record
    {
        public GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record(global::System.Int32 id, global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? user, global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? recordMedia)
        {
            Id = id;
            User = user;
            RecordMedia = recordMedia;
        }

        public global::System.Int32 Id { get; }
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? User { get; }
        /// <summary>
        /// Reads a single `RecordMedia` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? RecordMedia { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && ((User is null && other.User is null) || User != null && User.Equals(other.User)) && ((RecordMedia is null && other.RecordMedia is null) || RecordMedia != null && RecordMedia.Equals(other.RecordMedia));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                if (RecordMedia != null)
                {
                    hash ^= 397 * RecordMedia.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User : global::System.IEquatable<GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User>, IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User
    {
        public GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User(global::System.String? steamName)
        {
            SteamName = steamName;
        }

        public global::System.String? SteamName { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SteamName is null && other.SteamName is null) || SteamName != null && SteamName.Equals(other.SteamName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SteamName != null)
                {
                    hash ^= 397 * SteamName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia : global::System.IEquatable<GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia>, IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia
    {
        public GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia(global::System.String? ghostUrl)
        {
            GhostUrl = ghostUrl;
        }

        public global::System.String? GhostUrl { get; }

        public virtual global::System.Boolean Equals(GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GhostUrl is null && other.GhostUrl is null) || GhostUrl != null && GhostUrl.Equals(other.GhostUrl)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GhostUrl != null)
                {
                    hash ^= 397 * GhostUrl.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhostsResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals? PersonalBestGlobals { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals
    {
        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection : IGetAdditionalGhosts_PersonalBestGlobals
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes
    {
        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal : IGetAdditionalGhosts_PersonalBestGlobals_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGhostRecordFrag
    {
        public global::System.Int32 Id { get; }
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? User { get; }
        /// <summary>
        /// Reads a single `RecordMedia` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? RecordMedia { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record : IGhostRecordFrag
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record : IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User
    {
        public global::System.String? SteamName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User : IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia
    {
        public global::System.String? GhostUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia : IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsResult : global::System.IEquatable<GetLevelPointsResult>, IGetLevelPointsResult
    {
        public GetLevelPointsResult(global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints? levelPoints)
        {
            LevelPoints = levelPoints;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `LevelPoint`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints? LevelPoints { get; }

        public virtual global::System.Boolean Equals(GetLevelPointsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LevelPoints is null && other.LevelPoints is null) || LevelPoints != null && LevelPoints.Equals(other.LevelPoints)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLevelPointsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (LevelPoints != null)
                {
                    hash ^= 397 * LevelPoints.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `LevelPoint` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPoints_LevelPoints_LevelPointsConnection : global::System.IEquatable<GetLevelPoints_LevelPoints_LevelPointsConnection>, IGetLevelPoints_LevelPoints_LevelPointsConnection
    {
        public GetLevelPoints_LevelPoints_LevelPointsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `LevelPoint` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetLevelPoints_LevelPoints_LevelPointsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLevelPoints_LevelPoints_LevelPointsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPoints_LevelPoints_Nodes_LevelPoint : global::System.IEquatable<GetLevelPoints_LevelPoints_Nodes_LevelPoint>, IGetLevelPoints_LevelPoints_Nodes_LevelPoint
    {
        public GetLevelPoints_LevelPoints_Nodes_LevelPoint(global::System.Int32 points)
        {
            Points = points;
        }

        public global::System.Int32 Points { get; }

        public virtual global::System.Boolean Equals(GetLevelPoints_LevelPoints_Nodes_LevelPoint? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Points, other.Points));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLevelPoints_LevelPoints_Nodes_LevelPoint)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Points.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPointsResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `LevelPoint`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints? LevelPoints { get; }
    }

    /// <summary>
    /// A connection to a list of `LevelPoint` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPoints_LevelPoints
    {
        /// <summary>
        /// A list of `LevelPoint` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `LevelPoint` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPoints_LevelPoints_LevelPointsConnection : IGetLevelPoints_LevelPoints
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPoints_LevelPoints_Nodes
    {
        public global::System.Int32 Points { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPoints_LevelPoints_Nodes_LevelPoint : IGetLevelPoints_LevelPoints_Nodes
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestResult : global::System.IEquatable<GetPersonalBestResult>, IGetPersonalBestResult
    {
        public GetPersonalBestResult(global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals? PersonalBestGlobals { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PersonalBestGlobals is null && other.PersonalBestGlobals is null) || PersonalBestGlobals != null && PersonalBestGlobals.Equals(other.PersonalBestGlobals)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PersonalBestGlobals != null)
                {
                    hash ^= 397 * PersonalBestGlobals.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection : global::System.IEquatable<GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection>, IGetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection
    {
        public GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal : global::System.IEquatable<GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal>, IGetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal
    {
        public GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal(global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes_Record? @record)
        {
            Record = @record;
        }

        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes_Record? Record { get; }

        public virtual global::System.Boolean Equals(GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Record is null && other.Record is null) || Record != null && Record.Equals(other.Record)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Record != null)
                {
                    hash ^= 397 * Record.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record : global::System.IEquatable<GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record>, IGetPersonalBest_PersonalBestGlobals_Nodes_Record_Record
    {
        public GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record(global::System.Double time)
        {
            Time = time;
        }

        public global::System.Double Time { get; }

        public virtual global::System.Boolean Equals(GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Time, other.Time));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Time.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals? PersonalBestGlobals { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals
    {
        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection : IGetPersonalBest_PersonalBestGlobals
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals_Nodes
    {
        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes_Record? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal : IGetPersonalBest_PersonalBestGlobals_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals_Nodes_Record
    {
        public global::System.Double Time { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBest_PersonalBestGlobals_Nodes_Record_Record : IGetPersonalBest_PersonalBestGlobals_Nodes_Record
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountResult : global::System.IEquatable<GetPersonalBestCountResult>, IGetPersonalBestCountResult
    {
        public GetPersonalBestCountResult(global::TNRD.Zeepkist.GTR.IGetPersonalBestCount_PersonalBestGlobals? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestCount_PersonalBestGlobals? PersonalBestGlobals { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestCountResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PersonalBestGlobals is null && other.PersonalBestGlobals is null) || PersonalBestGlobals != null && PersonalBestGlobals.Equals(other.PersonalBestGlobals)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestCountResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PersonalBestGlobals != null)
                {
                    hash ^= 397 * PersonalBestGlobals.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection : global::System.IEquatable<GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection>, IGetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection
    {
        public GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// The count of *all* `PersonalBestGlobal` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(TotalCount, other.TotalCount));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestCountResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestCount_PersonalBestGlobals? PersonalBestGlobals { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestCount_PersonalBestGlobals
    {
        /// <summary>
        /// The count of *all* `PersonalBestGlobal` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection : IGetPersonalBestCount_PersonalBestGlobals
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsResult : global::System.IEquatable<GetPersonalBestGhostsResult>, IGetPersonalBestGhostsResult
    {
        public GetPersonalBestGhostsResult(global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals? PersonalBestGlobals { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhostsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PersonalBestGlobals is null && other.PersonalBestGlobals is null) || PersonalBestGlobals != null && PersonalBestGlobals.Equals(other.PersonalBestGlobals)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhostsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PersonalBestGlobals != null)
                {
                    hash ^= 397 * PersonalBestGlobals.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection : global::System.IEquatable<GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection>, IGetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection
    {
        public GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal : global::System.IEquatable<GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal>, IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal
    {
        public GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal(global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record? @record)
        {
            Record = @record;
        }

        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record? Record { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Record is null && other.Record is null) || Record != null && Record.Equals(other.Record)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Record != null)
                {
                    hash ^= 397 * Record.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record : global::System.IEquatable<GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record>, IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record
    {
        public GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record(global::System.Int32 id, global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? user, global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? recordMedia)
        {
            Id = id;
            User = user;
            RecordMedia = recordMedia;
        }

        public global::System.Int32 Id { get; }
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? User { get; }
        /// <summary>
        /// Reads a single `RecordMedia` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? RecordMedia { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && ((User is null && other.User is null) || User != null && User.Equals(other.User)) && ((RecordMedia is null && other.RecordMedia is null) || RecordMedia != null && RecordMedia.Equals(other.RecordMedia));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                if (RecordMedia != null)
                {
                    hash ^= 397 * RecordMedia.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User : global::System.IEquatable<GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User>, IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User
    {
        public GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User(global::System.String? steamName)
        {
            SteamName = steamName;
        }

        public global::System.String? SteamName { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SteamName is null && other.SteamName is null) || SteamName != null && SteamName.Equals(other.SteamName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SteamName != null)
                {
                    hash ^= 397 * SteamName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia : global::System.IEquatable<GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia>, IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia
    {
        public GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia(global::System.String? ghostUrl)
        {
            GhostUrl = ghostUrl;
        }

        public global::System.String? GhostUrl { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GhostUrl is null && other.GhostUrl is null) || GhostUrl != null && GhostUrl.Equals(other.GhostUrl)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GhostUrl != null)
                {
                    hash ^= 397 * GhostUrl.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhostsResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals? PersonalBestGlobals { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals
    {
        /// <summary>
        /// A list of `PersonalBestGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `PersonalBestGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection : IGetPersonalBestGhosts_PersonalBestGlobals
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes
    {
        /// <summary>
        /// Reads a single `Record` that is related to this `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal : IGetPersonalBestGhosts_PersonalBestGlobals_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record : IGhostRecordFrag
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record : IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User
    {
        public global::System.String? SteamName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User_User : IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia
    {
        public global::System.String? GhostUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia : IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsResult : global::System.IEquatable<GetPersonalBestsResult>, IGetPersonalBestsResult
    {
        public GetPersonalBestsResult(global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records? records)
        {
            Records = records;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records? Records { get; }

        public virtual global::System.Boolean Equals(GetPersonalBestsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Records is null && other.Records is null) || Records != null && Records.Equals(other.Records)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBestsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Records != null)
                {
                    hash ^= 397 * Records.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBests_Records_RecordsConnection : global::System.IEquatable<GetPersonalBests_Records_RecordsConnection>, IGetPersonalBests_Records_RecordsConnection
    {
        public GetPersonalBests_Records_RecordsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `Record` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetPersonalBests_Records_RecordsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBests_Records_RecordsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBests_Records_Nodes_Record : global::System.IEquatable<GetPersonalBests_Records_Nodes_Record>, IGetPersonalBests_Records_Nodes_Record
    {
        public GetPersonalBests_Records_Nodes_Record(global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes_User? user, global::System.Double time)
        {
            User = user;
            Time = time;
        }

        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes_User? User { get; }
        public global::System.Double Time { get; }

        public virtual global::System.Boolean Equals(GetPersonalBests_Records_Nodes_Record? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User))) && global::System.Object.Equals(Time, other.Time);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBests_Records_Nodes_Record)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                hash ^= 397 * Time.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBests_Records_Nodes_User_User : global::System.IEquatable<GetPersonalBests_Records_Nodes_User_User>, IGetPersonalBests_Records_Nodes_User_User
    {
        public GetPersonalBests_Records_Nodes_User_User(global::System.String? steamName, global::System.String? steamId)
        {
            SteamName = steamName;
            SteamId = steamId;
        }

        public global::System.String? SteamName { get; }
        public global::System.String? SteamId { get; }

        public virtual global::System.Boolean Equals(GetPersonalBests_Records_Nodes_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SteamName is null && other.SteamName is null) || SteamName != null && SteamName.Equals(other.SteamName))) && ((SteamId is null && other.SteamId is null) || SteamId != null && SteamId.Equals(other.SteamId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonalBests_Records_Nodes_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SteamName != null)
                {
                    hash ^= 397 * SteamName.GetHashCode();
                }

                if (SteamId != null)
                {
                    hash ^= 397 * SteamId.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestsResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records? Records { get; }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records
    {
        /// <summary>
        /// A list of `Record` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records_RecordsConnection : IGetPersonalBests_Records
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records_Nodes
    {
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes_User? User { get; }
        public global::System.Double Time { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records_Nodes_Record : IGetPersonalBests_Records_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records_Nodes_User
    {
        public global::System.String? SteamName { get; }
        public global::System.String? SteamId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBests_Records_Nodes_User_User : IGetPersonalBests_Records_Nodes_User
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelResult : global::System.IEquatable<GetPlayerRankOnLevelResult>, IGetPlayerRankOnLevelResult
    {
        public GetPlayerRankOnLevelResult(global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevel_Records? records)
        {
            Records = records;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevel_Records? Records { get; }

        public virtual global::System.Boolean Equals(GetPlayerRankOnLevelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Records is null && other.Records is null) || Records != null && Records.Equals(other.Records)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPlayerRankOnLevelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Records != null)
                {
                    hash ^= 397 * Records.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevel_Records_RecordsConnection : global::System.IEquatable<GetPlayerRankOnLevel_Records_RecordsConnection>, IGetPlayerRankOnLevel_Records_RecordsConnection
    {
        public GetPlayerRankOnLevel_Records_RecordsConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// The count of *all* `Record` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetPlayerRankOnLevel_Records_RecordsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(TotalCount, other.TotalCount));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPlayerRankOnLevel_Records_RecordsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPlayerRankOnLevelResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevel_Records? Records { get; }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPlayerRankOnLevel_Records
    {
        /// <summary>
        /// The count of *all* `Record` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of `Record` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPlayerRankOnLevel_Records_RecordsConnection : IGetPlayerRankOnLevel_Records
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountResult : global::System.IEquatable<GetTotalUserCountResult>, IGetTotalUserCountResult
    {
        public GetTotalUserCountResult(global::TNRD.Zeepkist.GTR.IGetTotalUserCount_Users? users)
        {
            Users = users;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `User`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetTotalUserCount_Users? Users { get; }

        public virtual global::System.Boolean Equals(GetTotalUserCountResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Users is null && other.Users is null) || Users != null && Users.Equals(other.Users)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTotalUserCountResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Users != null)
                {
                    hash ^= 397 * Users.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `User` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCount_Users_UsersConnection : global::System.IEquatable<GetTotalUserCount_Users_UsersConnection>, IGetTotalUserCount_Users_UsersConnection
    {
        public GetTotalUserCount_Users_UsersConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// The count of *all* `User` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetTotalUserCount_Users_UsersConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(TotalCount, other.TotalCount));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTotalUserCount_Users_UsersConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetTotalUserCountResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `User`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetTotalUserCount_Users? Users { get; }
    }

    /// <summary>
    /// A connection to a list of `User` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetTotalUserCount_Users
    {
        /// <summary>
        /// The count of *all* `User` you could get from the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of `User` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetTotalUserCount_Users_UsersConnection : IGetTotalUserCount_Users
    {
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderResult : global::System.IEquatable<GetWorldRecordHolderResult>, IGetWorldRecordHolderResult
    {
        public GetWorldRecordHolderResult(global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals? worldRecordGlobals)
        {
            WorldRecordGlobals = worldRecordGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `WorldRecordGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals? WorldRecordGlobals { get; }

        public virtual global::System.Boolean Equals(GetWorldRecordHolderResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((WorldRecordGlobals is null && other.WorldRecordGlobals is null) || WorldRecordGlobals != null && WorldRecordGlobals.Equals(other.WorldRecordGlobals)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorldRecordHolderResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (WorldRecordGlobals != null)
                {
                    hash ^= 397 * WorldRecordGlobals.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of `WorldRecordGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection : global::System.IEquatable<GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection>, IGetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection
    {
        public GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes> nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of `WorldRecordGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes> Nodes { get; }

        public virtual global::System.Boolean Equals(GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Nodes_elm in Nodes)
                {
                    hash ^= 397 * Nodes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal : global::System.IEquatable<GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal>, IGetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal
    {
        public GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal(global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record? @record)
        {
            Record = @record;
        }

        /// <summary>
        /// Reads a single `Record` that is related to this `WorldRecordGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record? Record { get; }

        public virtual global::System.Boolean Equals(GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Record is null && other.Record is null) || Record != null && Record.Equals(other.Record)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Record != null)
                {
                    hash ^= 397 * Record.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record : global::System.IEquatable<GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record>, IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record
    {
        public GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record(global::System.Double time, global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User? user)
        {
            Time = time;
            User = user;
        }

        public global::System.Double Time { get; }
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User? User { get; }

        public virtual global::System.Boolean Equals(GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Time, other.Time)) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Time.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User : global::System.IEquatable<GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User>, IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User
    {
        public GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User(global::System.String? steamName)
        {
            SteamName = steamName;
        }

        public global::System.String? SteamName { get; }

        public virtual global::System.Boolean Equals(GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SteamName is null && other.SteamName is null) || SteamName != null && SteamName.Equals(other.SteamName)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SteamName != null)
                {
                    hash ^= 397 * SteamName.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query type which gives access points into the data universe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolderResult
    {
        /// <summary>
        /// Reads and enables pagination through a set of `WorldRecordGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals? WorldRecordGlobals { get; }
    }

    /// <summary>
    /// A connection to a list of `WorldRecordGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals
    {
        /// <summary>
        /// A list of `WorldRecordGlobal` objects.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes> Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of `WorldRecordGlobal` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection : IGetWorldRecordHolder_WorldRecordGlobals
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes
    {
        /// <summary>
        /// Reads a single `Record` that is related to this `WorldRecordGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal : IGetWorldRecordHolder_WorldRecordGlobals_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record
    {
        public global::System.Double Time { get; }
        /// <summary>
        /// Reads a single `User` that is related to this `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record : IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User
    {
        public global::System.String? SteamName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User : IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAdditionalGhosts GraphQL operation
    /// <code>
    /// query GetAdditionalGhosts($ids: [BigFloat!], $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { in: $ids } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAdditionalGhostsQueryDocument()
        {
        }

        public static GetAdditionalGhostsQueryDocument Instance { get; } = new GetAdditionalGhostsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x64,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x73,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x42,
            0x69,
            0x67,
            0x46,
            0x6c,
            0x6f,
            0x61,
            0x74,
            0x21,
            0x5d,
            0x2c,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x6e,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x46,
            0x72,
            0x61,
            0x67,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x46,
            0x72,
            0x61,
            0x67,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x55,
            0x72,
            0x6c,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "34d3bfe929488cf7863f6b4b8532f964");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAdditionalGhosts GraphQL operation
    /// <code>
    /// query GetAdditionalGhosts($ids: [BigFloat!], $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { in: $ids } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsQuery : global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAdditionalGhostsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _bigFloatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetAdditionalGhostsQuery(global::StrawberryShake.IOperationExecutor<IGetAdditionalGhostsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _bigFloatFormatter = serializerResolver.GetInputValueFormatter("BigFloat");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAdditionalGhostsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAdditionalGhostsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids, hash);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAdditionalGhostsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids, hash);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? hash)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            variables.Add("hash", FormatHash(hash));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAdditionalGhostsQueryDocument.Instance.Hash.Value, name: "GetAdditionalGhosts", document: GetAdditionalGhostsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.Collections.Generic.IReadOnlyList<global::System.String>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_bigFloatFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAdditionalGhosts GraphQL operation
    /// <code>
    /// query GetAdditionalGhosts($ids: [BigFloat!], $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { in: $ids } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetAdditionalGhostsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAdditionalGhostsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAdditionalGhostsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetLevelPoints GraphQL operation
    /// <code>
    /// query GetLevelPoints($hash: String) {
    ///   levelPoints(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       points
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetLevelPointsQueryDocument()
        {
        }

        public static GetLevelPointsQueryDocument Instance { get; } = new GetLevelPointsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x4c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x73,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5f571fbc8770bea00a58b8ad0e8c93f8");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLevelPoints GraphQL operation
    /// <code>
    /// query GetLevelPoints($hash: String) {
    ///   levelPoints(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       points
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsQuery : global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLevelPointsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetLevelPointsQuery(global::StrawberryShake.IOperationExecutor<IGetLevelPointsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLevelPointsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLevelPointsResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLevelPointsResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? hash)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetLevelPointsQueryDocument.Instance.Hash.Value, name: "GetLevelPoints", document: GetLevelPointsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLevelPoints GraphQL operation
    /// <code>
    /// query GetLevelPoints($hash: String) {
    ///   levelPoints(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       points
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetLevelPointsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLevelPointsResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLevelPointsResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBest GraphQL operation
    /// <code>
    /// query GetPersonalBest($hash: String, $steamId: BigFloat) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonalBestQueryDocument()
        {
        }

        public static GetPersonalBestQueryDocument Instance { get; } = new GetPersonalBestQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x2c,
            0x20,
            0x24,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x42,
            0x69,
            0x67,
            0x46,
            0x6c,
            0x6f,
            0x61,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c36ba879e2e1a4242b96e147866d8365");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBest GraphQL operation
    /// <code>
    /// query GetPersonalBest($hash: String, $steamId: BigFloat) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestQuery : global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonalBestResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _bigFloatFormatter;
        public GetPersonalBestQuery(global::StrawberryShake.IOperationExecutor<IGetPersonalBestResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _bigFloatFormatter = serializerResolver.GetInputValueFormatter("BigFloat");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonalBestResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestResult>> ExecuteAsync(global::System.String? hash, global::System.String? steamId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash, steamId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestResult>> Watch(global::System.String? hash, global::System.String? steamId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash, steamId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? hash, global::System.String? steamId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            variables.Add("steamId", FormatSteamId(steamId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonalBestQueryDocument.Instance.Hash.Value, name: "GetPersonalBest", document: GetPersonalBestQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatSteamId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _bigFloatFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBest GraphQL operation
    /// <code>
    /// query GetPersonalBest($hash: String, $steamId: BigFloat) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestResult>> ExecuteAsync(global::System.String? hash, global::System.String? steamId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestResult>> Watch(global::System.String? hash, global::System.String? steamId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestCount GraphQL operation
    /// <code>
    /// query GetPersonalBestCount($hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonalBestCountQueryDocument()
        {
        }

        public static GetPersonalBestCountQueryDocument Instance { get; } = new GetPersonalBestCountQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d8a53f6911fa2fe727989d0ac2fe76d4");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestCount GraphQL operation
    /// <code>
    /// query GetPersonalBestCount($hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountQuery : global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonalBestCountResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetPersonalBestCountQuery(global::StrawberryShake.IOperationExecutor<IGetPersonalBestCountResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonalBestCountResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestCountResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestCountResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? hash)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonalBestCountQueryDocument.Instance.Hash.Value, name: "GetPersonalBestCount", document: GetPersonalBestCountQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestCount GraphQL operation
    /// <code>
    /// query GetPersonalBestCount($hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestCountQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestCountResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestCountResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestGhosts GraphQL operation
    /// <code>
    /// query GetPersonalBestGhosts($steamId: BigFloat, $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonalBestGhostsQueryDocument()
        {
        }

        public static GetPersonalBestGhostsQueryDocument Instance { get; } = new GetPersonalBestGhostsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x73,
            0x28,
            0x24,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x42,
            0x69,
            0x67,
            0x46,
            0x6c,
            0x6f,
            0x61,
            0x74,
            0x2c,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x46,
            0x72,
            0x61,
            0x67,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x47,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x46,
            0x72,
            0x61,
            0x67,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x68,
            0x6f,
            0x73,
            0x74,
            0x55,
            0x72,
            0x6c,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "026548466ce76ee48c19f076529b8ae5");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestGhosts GraphQL operation
    /// <code>
    /// query GetPersonalBestGhosts($steamId: BigFloat, $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsQuery : global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonalBestGhostsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _bigFloatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetPersonalBestGhostsQuery(global::StrawberryShake.IOperationExecutor<IGetPersonalBestGhostsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _bigFloatFormatter = serializerResolver.GetInputValueFormatter("BigFloat");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonalBestGhostsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestGhostsResult>> ExecuteAsync(global::System.String? steamId, global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(steamId, hash);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestGhostsResult>> Watch(global::System.String? steamId, global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(steamId, hash);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? steamId, global::System.String? hash)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("steamId", FormatSteamId(steamId));
            variables.Add("hash", FormatHash(hash));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonalBestGhostsQueryDocument.Instance.Hash.Value, name: "GetPersonalBestGhosts", document: GetPersonalBestGhostsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSteamId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _bigFloatFormatter.Format(value);
            }
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBestGhosts GraphQL operation
    /// <code>
    /// query GetPersonalBestGhosts($steamId: BigFloat, $hash: String) {
    ///   personalBestGlobals(filter: { level: { hash: { equalTo: $hash } }, user: { steamId: { equalTo: $steamId } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         ... GhostRecordFrag
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GhostRecordFrag on Record {
    ///   id
    ///   user {
    ///     __typename
    ///     steamName
    ///   }
    ///   recordMedia {
    ///     __typename
    ///     ghostUrl
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestGhostsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestGhostsResult>> ExecuteAsync(global::System.String? steamId, global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestGhostsResult>> Watch(global::System.String? steamId, global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBests GraphQL operation
    /// <code>
    /// query GetPersonalBests($hash: String, $first: Int = null, $offset: Int = null) {
    ///   records(filter: { level: { hash: { equalTo: $hash } }, personalBestGlobalsExist: true }, first: $first, offset: $offset, orderBy: TIME_ASC) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       user {
    ///         __typename
    ///         steamName
    ///         steamId
    ///       }
    ///       time
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonalBestsQueryDocument()
        {
        }

        public static GetPersonalBestsQueryDocument Instance { get; } = new GetPersonalBestsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x73,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x2c,
            0x20,
            0x24,
            0x66,
            0x69,
            0x72,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x20,
            0x3d,
            0x20,
            0x6e,
            0x75,
            0x6c,
            0x6c,
            0x2c,
            0x20,
            0x24,
            0x6f,
            0x66,
            0x66,
            0x73,
            0x65,
            0x74,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x20,
            0x3d,
            0x20,
            0x6e,
            0x75,
            0x6c,
            0x6c,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x45,
            0x78,
            0x69,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x74,
            0x72,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x66,
            0x69,
            0x72,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x69,
            0x72,
            0x73,
            0x74,
            0x2c,
            0x20,
            0x6f,
            0x66,
            0x66,
            0x73,
            0x65,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x6f,
            0x66,
            0x66,
            0x73,
            0x65,
            0x74,
            0x2c,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x42,
            0x79,
            0x3a,
            0x20,
            0x54,
            0x49,
            0x4d,
            0x45,
            0x5f,
            0x41,
            0x53,
            0x43,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x49,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c0017b751eb2be54d9328104823052fd");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBests GraphQL operation
    /// <code>
    /// query GetPersonalBests($hash: String, $first: Int = null, $offset: Int = null) {
    ///   records(filter: { level: { hash: { equalTo: $hash } }, personalBestGlobalsExist: true }, first: $first, offset: $offset, orderBy: TIME_ASC) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       user {
    ///         __typename
    ///         steamName
    ///         steamId
    ///       }
    ///       time
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsQuery : global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonalBestsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetPersonalBestsQuery(global::StrawberryShake.IOperationExecutor<IGetPersonalBestsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonalBestsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestsResult>> ExecuteAsync(global::System.String? hash, global::System.Int32? first, global::System.Int32? offset, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash, first, offset);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestsResult>> Watch(global::System.String? hash, global::System.Int32? first, global::System.Int32? offset, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash, first, offset);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? hash, global::System.Int32? first, global::System.Int32? offset)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            variables.Add("first", FormatFirst(first));
            variables.Add("offset", FormatOffset(offset));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonalBestsQueryDocument.Instance.Hash.Value, name: "GetPersonalBests", document: GetPersonalBestsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFirst(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOffset(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonalBests GraphQL operation
    /// <code>
    /// query GetPersonalBests($hash: String, $first: Int = null, $offset: Int = null) {
    ///   records(filter: { level: { hash: { equalTo: $hash } }, personalBestGlobalsExist: true }, first: $first, offset: $offset, orderBy: TIME_ASC) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       user {
    ///         __typename
    ///         steamName
    ///         steamId
    ///       }
    ///       time
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPersonalBestsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonalBestsResult>> ExecuteAsync(global::System.String? hash, global::System.Int32? first, global::System.Int32? offset, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonalBestsResult>> Watch(global::System.String? hash, global::System.Int32? first, global::System.Int32? offset, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPlayerRankOnLevel GraphQL operation
    /// <code>
    /// query GetPlayerRankOnLevel($hash: String!, $time: Float!) {
    ///   records(filter: { personalBestGlobalsExist: true, time: { lessThan: $time }, level: { hash: { equalTo: $hash } } }, orderBy: TIME_ASC) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPlayerRankOnLevelQueryDocument()
        {
        }

        public static GetPlayerRankOnLevelQueryDocument Instance { get; } = new GetPlayerRankOnLevelQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x52,
            0x61,
            0x6e,
            0x6b,
            0x4f,
            0x6e,
            0x4c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x46,
            0x6c,
            0x6f,
            0x61,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x61,
            0x6c,
            0x42,
            0x65,
            0x73,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x45,
            0x78,
            0x69,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x74,
            0x72,
            0x75,
            0x65,
            0x2c,
            0x20,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x73,
            0x73,
            0x54,
            0x68,
            0x61,
            0x6e,
            0x3a,
            0x20,
            0x24,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x2c,
            0x20,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x42,
            0x79,
            0x3a,
            0x20,
            0x54,
            0x49,
            0x4d,
            0x45,
            0x5f,
            0x41,
            0x53,
            0x43,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "db142150c3be76b3d25e7e28eeabfed6");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPlayerRankOnLevel GraphQL operation
    /// <code>
    /// query GetPlayerRankOnLevel($hash: String!, $time: Float!) {
    ///   records(filter: { personalBestGlobalsExist: true, time: { lessThan: $time }, level: { hash: { equalTo: $hash } } }, orderBy: TIME_ASC) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelQuery : global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPlayerRankOnLevelResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        public GetPlayerRankOnLevelQuery(global::StrawberryShake.IOperationExecutor<IGetPlayerRankOnLevelResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPlayerRankOnLevelResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlayerRankOnLevelResult>> ExecuteAsync(global::System.String hash, global::System.Double time, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash, time);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlayerRankOnLevelResult>> Watch(global::System.String hash, global::System.Double time, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash, time);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String hash, global::System.Double time)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            variables.Add("time", FormatTime(time));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPlayerRankOnLevelQueryDocument.Instance.Hash.Value, name: "GetPlayerRankOnLevel", document: GetPlayerRankOnLevelQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTime(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPlayerRankOnLevel GraphQL operation
    /// <code>
    /// query GetPlayerRankOnLevel($hash: String!, $time: Float!) {
    ///   records(filter: { personalBestGlobalsExist: true, time: { lessThan: $time }, level: { hash: { equalTo: $hash } } }, orderBy: TIME_ASC) {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetPlayerRankOnLevelQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlayerRankOnLevelResult>> ExecuteAsync(global::System.String hash, global::System.Double time, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlayerRankOnLevelResult>> Watch(global::System.String hash, global::System.Double time, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTotalUserCount GraphQL operation
    /// <code>
    /// query GetTotalUserCount {
    ///   users {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTotalUserCountQueryDocument()
        {
        }

        public static GetTotalUserCountQueryDocument Instance { get; } = new GetTotalUserCountQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x54,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x55,
            0x73,
            0x65,
            0x72,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ac6e2c08d795381294cf26c59ba4ae8b");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTotalUserCount GraphQL operation
    /// <code>
    /// query GetTotalUserCount {
    ///   users {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountQuery : global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTotalUserCountResult> _operationExecutor;
        public GetTotalUserCountQuery(global::StrawberryShake.IOperationExecutor<IGetTotalUserCountResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTotalUserCountResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTotalUserCountResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTotalUserCountResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTotalUserCountQueryDocument.Instance.Hash.Value, name: "GetTotalUserCount", document: GetTotalUserCountQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTotalUserCount GraphQL operation
    /// <code>
    /// query GetTotalUserCount {
    ///   users {
    ///     __typename
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetTotalUserCountQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTotalUserCountResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTotalUserCountResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetWorldRecordHolder GraphQL operation
    /// <code>
    /// query GetWorldRecordHolder($hash: String) {
    ///   worldRecordGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///         user {
    ///           __typename
    ///           steamName
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderQueryDocument : global::StrawberryShake.IDocument
    {
        private GetWorldRecordHolderQueryDocument()
        {
        }

        public static GetWorldRecordHolderQueryDocument Instance { get; } = new GetWorldRecordHolderQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public MemoryAlias::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x57,
            0x6f,
            0x72,
            0x6c,
            0x64,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x48,
            0x6f,
            0x6c,
            0x64,
            0x65,
            0x72,
            0x28,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x77,
            0x6f,
            0x72,
            0x6c,
            0x64,
            0x52,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x47,
            0x6c,
            0x6f,
            0x62,
            0x61,
            0x6c,
            0x73,
            0x28,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x65,
            0x76,
            0x65,
            0x6c,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x71,
            0x75,
            0x61,
            0x6c,
            0x54,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x6f,
            0x72,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "87e79ca9f2561ac397002d14803684af");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWorldRecordHolder GraphQL operation
    /// <code>
    /// query GetWorldRecordHolder($hash: String) {
    ///   worldRecordGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///         user {
    ///           __typename
    ///           steamName
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderQuery : global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetWorldRecordHolderResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetWorldRecordHolderQuery(global::StrawberryShake.IOperationExecutor<IGetWorldRecordHolderResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetWorldRecordHolderResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWorldRecordHolderResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(hash);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWorldRecordHolderResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(hash);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? hash)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("hash", FormatHash(hash));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetWorldRecordHolderQueryDocument.Instance.Hash.Value, name: "GetWorldRecordHolder", document: GetWorldRecordHolderQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatHash(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWorldRecordHolder GraphQL operation
    /// <code>
    /// query GetWorldRecordHolder($hash: String) {
    ///   worldRecordGlobals(filter: { level: { hash: { equalTo: $hash } } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       record {
    ///         __typename
    ///         time
    ///         user {
    ///           __typename
    ///           steamName
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGetWorldRecordHolderQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWorldRecordHolderResult>> ExecuteAsync(global::System.String? hash, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWorldRecordHolderResult>> Watch(global::System.String? hash, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GtrClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GtrClient : global::TNRD.Zeepkist.GTR.IGtrClient
    {
        private readonly global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery _getAdditionalGhosts;
        private readonly global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery _getLevelPoints;
        private readonly global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery _getPersonalBest;
        private readonly global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery _getPersonalBestCount;
        private readonly global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery _getPersonalBestGhosts;
        private readonly global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery _getPersonalBests;
        private readonly global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery _getPlayerRankOnLevel;
        private readonly global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery _getTotalUserCount;
        private readonly global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery _getWorldRecordHolder;
        public GtrClient(global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery getAdditionalGhosts, global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery getLevelPoints, global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery getPersonalBest, global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery getPersonalBestCount, global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery getPersonalBestGhosts, global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery getPersonalBests, global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery getPlayerRankOnLevel, global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery getTotalUserCount, global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery getWorldRecordHolder)
        {
            _getAdditionalGhosts = getAdditionalGhosts ?? throw new global::System.ArgumentNullException(nameof(getAdditionalGhosts));
            _getLevelPoints = getLevelPoints ?? throw new global::System.ArgumentNullException(nameof(getLevelPoints));
            _getPersonalBest = getPersonalBest ?? throw new global::System.ArgumentNullException(nameof(getPersonalBest));
            _getPersonalBestCount = getPersonalBestCount ?? throw new global::System.ArgumentNullException(nameof(getPersonalBestCount));
            _getPersonalBestGhosts = getPersonalBestGhosts ?? throw new global::System.ArgumentNullException(nameof(getPersonalBestGhosts));
            _getPersonalBests = getPersonalBests ?? throw new global::System.ArgumentNullException(nameof(getPersonalBests));
            _getPlayerRankOnLevel = getPlayerRankOnLevel ?? throw new global::System.ArgumentNullException(nameof(getPlayerRankOnLevel));
            _getTotalUserCount = getTotalUserCount ?? throw new global::System.ArgumentNullException(nameof(getTotalUserCount));
            _getWorldRecordHolder = getWorldRecordHolder ?? throw new global::System.ArgumentNullException(nameof(getWorldRecordHolder));
        }

        public static global::System.String ClientName => "GtrClient";
        public global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery GetAdditionalGhosts => _getAdditionalGhosts;
        public global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery GetLevelPoints => _getLevelPoints;
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery GetPersonalBest => _getPersonalBest;
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery GetPersonalBestCount => _getPersonalBestCount;
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery GetPersonalBestGhosts => _getPersonalBestGhosts;
        public global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery GetPersonalBests => _getPersonalBests;
        public global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery GetPlayerRankOnLevel => _getPlayerRankOnLevel;
        public global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery GetTotalUserCount => _getTotalUserCount;
        public global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery GetWorldRecordHolder => _getWorldRecordHolder;
    }

    /// <summary>
    /// Represents the GtrClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface IGtrClient
    {
        global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsQuery GetAdditionalGhosts { get; }

        global::TNRD.Zeepkist.GTR.IGetLevelPointsQuery GetLevelPoints { get; }

        global::TNRD.Zeepkist.GTR.IGetPersonalBestQuery GetPersonalBest { get; }

        global::TNRD.Zeepkist.GTR.IGetPersonalBestCountQuery GetPersonalBestCount { get; }

        global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsQuery GetPersonalBestGhosts { get; }

        global::TNRD.Zeepkist.GTR.IGetPersonalBestsQuery GetPersonalBests { get; }

        global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelQuery GetPlayerRankOnLevel { get; }

        global::TNRD.Zeepkist.GTR.IGetTotalUserCountQuery GetTotalUserCount { get; }

        global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderQuery GetWorldRecordHolder { get; }
    }
}

namespace TNRD.Zeepkist.GTR.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetAdditionalGhostsResult>
    {
        public GetAdditionalGhostsResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult);

        public GetAdditionalGhostsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetAdditionalGhostsResultInfo info)
            {
                return new GetAdditionalGhostsResult(MapIGetAdditionalGhosts_PersonalBestGlobals(info.PersonalBestGlobals));
            }

            throw new global::System.ArgumentException("GetAdditionalGhostsResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals? MapIGetAdditionalGhosts_PersonalBestGlobals(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals returnValue = default !;
            if (data?.__typename.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection(MapNonNullableIGetAdditionalGhosts_PersonalBestGlobals_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes> MapNonNullableIGetAdditionalGhosts_PersonalBestGlobals_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData child in list)
            {
                personalBestGlobals.Add(MapNonNullableIGetAdditionalGhosts_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes MapNonNullableIGetAdditionalGhosts_PersonalBestGlobals_Nodes(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData data)
        {
            IGetAdditionalGhosts_PersonalBestGlobals_Nodes returnValue = default !;
            if (data.__typename.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal(MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record(data.Record));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record? MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record(global::TNRD.Zeepkist.GTR.State.RecordData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record returnValue = default !;
            if (data?.__typename.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_Record(data.Id ?? throw new global::System.ArgumentNullException(), MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(data.User), MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(data.RecordMedia));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::TNRD.Zeepkist.GTR.State.UserData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User(data.SteamName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::TNRD.Zeepkist.GTR.State.RecordMediaData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia returnValue = default !;
            if (data?.__typename.Equals("RecordMedia", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia(data.GhostUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetAdditionalGhostsResultInfo(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? PersonalBestGlobals { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAdditionalGhostsResultInfo(PersonalBestGlobals);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetLevelPointsResult>
    {
        public GetLevelPointsResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetLevelPointsResult);

        public GetLevelPointsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetLevelPointsResultInfo info)
            {
                return new GetLevelPointsResult(MapIGetLevelPoints_LevelPoints(info.LevelPoints));
            }

            throw new global::System.ArgumentException("GetLevelPointsResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints? MapIGetLevelPoints_LevelPoints(global::TNRD.Zeepkist.GTR.State.LevelPointsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetLevelPoints_LevelPoints returnValue = default !;
            if (data?.__typename.Equals("LevelPointsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetLevelPoints_LevelPoints_LevelPointsConnection(MapNonNullableIGetLevelPoints_LevelPoints_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes> MapNonNullableIGetLevelPoints_LevelPoints_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.LevelPointData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var levelPoints = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.LevelPointData child in list)
            {
                levelPoints.Add(MapNonNullableIGetLevelPoints_LevelPoints_Nodes(child));
            }

            return levelPoints;
        }

        private global::TNRD.Zeepkist.GTR.IGetLevelPoints_LevelPoints_Nodes MapNonNullableIGetLevelPoints_LevelPoints_Nodes(global::TNRD.Zeepkist.GTR.State.LevelPointData data)
        {
            IGetLevelPoints_LevelPoints_Nodes returnValue = default !;
            if (data.__typename.Equals("LevelPoint", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetLevelPoints_LevelPoints_Nodes_LevelPoint(data.Points ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetLevelPointsResultInfo(global::TNRD.Zeepkist.GTR.State.LevelPointsConnectionData? levelPoints)
        {
            LevelPoints = levelPoints;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `LevelPoint`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.LevelPointsConnectionData? LevelPoints { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLevelPointsResultInfo(LevelPoints);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetPersonalBestResult>
    {
        public GetPersonalBestResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetPersonalBestResult);

        public GetPersonalBestResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetPersonalBestResultInfo info)
            {
                return new GetPersonalBestResult(MapIGetPersonalBest_PersonalBestGlobals(info.PersonalBestGlobals));
            }

            throw new global::System.ArgumentException("GetPersonalBestResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals? MapIGetPersonalBest_PersonalBestGlobals(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBest_PersonalBestGlobals returnValue = default !;
            if (data?.__typename.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBest_PersonalBestGlobals_PersonalBestGlobalsConnection(MapNonNullableIGetPersonalBest_PersonalBestGlobals_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes> MapNonNullableIGetPersonalBest_PersonalBestGlobals_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData child in list)
            {
                personalBestGlobals.Add(MapNonNullableIGetPersonalBest_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes MapNonNullableIGetPersonalBest_PersonalBestGlobals_Nodes(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData data)
        {
            IGetPersonalBest_PersonalBestGlobals_Nodes returnValue = default !;
            if (data.__typename.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonalBest_PersonalBestGlobals_Nodes_PersonalBestGlobal(MapIGetPersonalBest_PersonalBestGlobals_Nodes_Record(data.Record));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBest_PersonalBestGlobals_Nodes_Record? MapIGetPersonalBest_PersonalBestGlobals_Nodes_Record(global::TNRD.Zeepkist.GTR.State.RecordData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBest_PersonalBestGlobals_Nodes_Record returnValue = default !;
            if (data?.__typename.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBest_PersonalBestGlobals_Nodes_Record_Record(data.Time ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetPersonalBestResultInfo(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? PersonalBestGlobals { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonalBestResultInfo(PersonalBestGlobals);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetPersonalBestCountResult>
    {
        public GetPersonalBestCountResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult);

        public GetPersonalBestCountResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetPersonalBestCountResultInfo info)
            {
                return new GetPersonalBestCountResult(MapIGetPersonalBestCount_PersonalBestGlobals(info.PersonalBestGlobals));
            }

            throw new global::System.ArgumentException("GetPersonalBestCountResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBestCount_PersonalBestGlobals? MapIGetPersonalBestCount_PersonalBestGlobals(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBestCount_PersonalBestGlobals returnValue = default !;
            if (data?.__typename.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBestCount_PersonalBestGlobals_PersonalBestGlobalsConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetPersonalBestCountResultInfo(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? PersonalBestGlobals { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonalBestCountResultInfo(PersonalBestGlobals);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetPersonalBestGhostsResult>
    {
        public GetPersonalBestGhostsResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult);

        public GetPersonalBestGhostsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetPersonalBestGhostsResultInfo info)
            {
                return new GetPersonalBestGhostsResult(MapIGetPersonalBestGhosts_PersonalBestGlobals(info.PersonalBestGlobals));
            }

            throw new global::System.ArgumentException("GetPersonalBestGhostsResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals? MapIGetPersonalBestGhosts_PersonalBestGlobals(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBestGhosts_PersonalBestGlobals returnValue = default !;
            if (data?.__typename.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBestGhosts_PersonalBestGlobals_PersonalBestGlobalsConnection(MapNonNullableIGetPersonalBestGhosts_PersonalBestGlobals_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes> MapNonNullableIGetPersonalBestGhosts_PersonalBestGlobals_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData child in list)
            {
                personalBestGlobals.Add(MapNonNullableIGetPersonalBestGhosts_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes MapNonNullableIGetPersonalBestGhosts_PersonalBestGlobals_Nodes(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData data)
        {
            IGetPersonalBestGhosts_PersonalBestGlobals_Nodes returnValue = default !;
            if (data.__typename.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonalBestGhosts_PersonalBestGlobals_Nodes_PersonalBestGlobal(MapIGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record(data.Record));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record? MapIGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record(global::TNRD.Zeepkist.GTR.State.RecordData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record returnValue = default !;
            if (data?.__typename.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record_Record(data.Id ?? throw new global::System.ArgumentNullException(), MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(data.User), MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(data.RecordMedia));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User? MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::TNRD.Zeepkist.GTR.State.UserData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User_User(data.SteamName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia? MapIGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::TNRD.Zeepkist.GTR.State.RecordMediaData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia returnValue = default !;
            if (data?.__typename.Equals("RecordMedia", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia_RecordMedia(data.GhostUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetPersonalBestGhostsResultInfo(global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? personalBestGlobals)
        {
            PersonalBestGlobals = personalBestGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `PersonalBestGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? PersonalBestGlobals { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonalBestGhostsResultInfo(PersonalBestGlobals);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetPersonalBestsResult>
    {
        public GetPersonalBestsResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult);

        public GetPersonalBestsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetPersonalBestsResultInfo info)
            {
                return new GetPersonalBestsResult(MapIGetPersonalBests_Records(info.Records));
            }

            throw new global::System.ArgumentException("GetPersonalBestsResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records? MapIGetPersonalBests_Records(global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBests_Records returnValue = default !;
            if (data?.__typename.Equals("RecordsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBests_Records_RecordsConnection(MapNonNullableIGetPersonalBests_Records_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes> MapNonNullableIGetPersonalBests_Records_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.RecordData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var @records = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.RecordData child in list)
            {
                @records.Add(MapNonNullableIGetPersonalBests_Records_Nodes(child));
            }

            return @records;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes MapNonNullableIGetPersonalBests_Records_Nodes(global::TNRD.Zeepkist.GTR.State.RecordData data)
        {
            IGetPersonalBests_Records_Nodes returnValue = default !;
            if (data.__typename.Equals("Record", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonalBests_Records_Nodes_Record(MapIGetPersonalBests_Records_Nodes_User(data.User), data.Time ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetPersonalBests_Records_Nodes_User? MapIGetPersonalBests_Records_Nodes_User(global::TNRD.Zeepkist.GTR.State.UserData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonalBests_Records_Nodes_User returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonalBests_Records_Nodes_User_User(data.SteamName, data.SteamId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetPersonalBestsResultInfo(global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? records)
        {
            Records = records;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? Records { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonalBestsResultInfo(Records);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetPlayerRankOnLevelResult>
    {
        public GetPlayerRankOnLevelResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult);

        public GetPlayerRankOnLevelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetPlayerRankOnLevelResultInfo info)
            {
                return new GetPlayerRankOnLevelResult(MapIGetPlayerRankOnLevel_Records(info.Records));
            }

            throw new global::System.ArgumentException("GetPlayerRankOnLevelResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevel_Records? MapIGetPlayerRankOnLevel_Records(global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetPlayerRankOnLevel_Records returnValue = default !;
            if (data?.__typename.Equals("RecordsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPlayerRankOnLevel_Records_RecordsConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetPlayerRankOnLevelResultInfo(global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? records)
        {
            Records = records;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `Record`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? Records { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPlayerRankOnLevelResultInfo(Records);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetTotalUserCountResult>
    {
        public GetTotalUserCountResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult);

        public GetTotalUserCountResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetTotalUserCountResultInfo info)
            {
                return new GetTotalUserCountResult(MapIGetTotalUserCount_Users(info.Users));
            }

            throw new global::System.ArgumentException("GetTotalUserCountResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetTotalUserCount_Users? MapIGetTotalUserCount_Users(global::TNRD.Zeepkist.GTR.State.UsersConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetTotalUserCount_Users returnValue = default !;
            if (data?.__typename.Equals("UsersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTotalUserCount_Users_UsersConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetTotalUserCountResultInfo(global::TNRD.Zeepkist.GTR.State.UsersConnectionData? users)
        {
            Users = users;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `User`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.UsersConnectionData? Users { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTotalUserCountResultInfo(Users);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.GetWorldRecordHolderResult>
    {
        public GetWorldRecordHolderResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult);

        public GetWorldRecordHolderResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetWorldRecordHolderResultInfo info)
            {
                return new GetWorldRecordHolderResult(MapIGetWorldRecordHolder_WorldRecordGlobals(info.WorldRecordGlobals));
            }

            throw new global::System.ArgumentException("GetWorldRecordHolderResultInfo expected.");
        }

        private global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals? MapIGetWorldRecordHolder_WorldRecordGlobals(global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalsConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetWorldRecordHolder_WorldRecordGlobals returnValue = default !;
            if (data?.__typename.Equals("WorldRecordGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetWorldRecordHolder_WorldRecordGlobals_WorldRecordGlobalsConnection(MapNonNullableIGetWorldRecordHolder_WorldRecordGlobals_NodesNonNullableArray(data.Nodes ?? throw new global::System.ArgumentNullException()));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes> MapNonNullableIGetWorldRecordHolder_WorldRecordGlobals_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData>? list)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var worldRecordGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes>();
            foreach (global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData child in list)
            {
                worldRecordGlobals.Add(MapNonNullableIGetWorldRecordHolder_WorldRecordGlobals_Nodes(child));
            }

            return worldRecordGlobals;
        }

        private global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes MapNonNullableIGetWorldRecordHolder_WorldRecordGlobals_Nodes(global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData data)
        {
            IGetWorldRecordHolder_WorldRecordGlobals_Nodes returnValue = default !;
            if (data.__typename.Equals("WorldRecordGlobal", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetWorldRecordHolder_WorldRecordGlobals_Nodes_WorldRecordGlobal(MapIGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record(data.Record));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record? MapIGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record(global::TNRD.Zeepkist.GTR.State.RecordData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record returnValue = default !;
            if (data?.__typename.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_Record(data.Time ?? throw new global::System.ArgumentNullException(), MapIGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User(data.User));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::TNRD.Zeepkist.GTR.IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User? MapIGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User(global::TNRD.Zeepkist.GTR.State.UserData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User_User(data.SteamName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetWorldRecordHolderResultInfo(global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalsConnectionData? worldRecordGlobals)
        {
            WorldRecordGlobals = worldRecordGlobals;
        }

        /// <summary>
        /// Reads and enables pagination through a set of `WorldRecordGlobal`.
        /// </summary>
        public global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalsConnectionData? WorldRecordGlobals { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetWorldRecordHolderResultInfo(WorldRecordGlobals);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetAdditionalGhostsBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _bigFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetAdditionalGhostsBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _bigFloatParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("BigFloat") ?? throw new global::System.ArgumentException("No serializer for type `BigFloat` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetAdditionalGhostsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetAdditionalGhostsResultInfo(Deserialize_IGetAdditionalGhosts_PersonalBestGlobals(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personalBestGlobals")));
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData(typename, nodes: Deserialize_NonNullableIGetAdditionalGhosts_PersonalBestGlobals_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData> Deserialize_NonNullableIGetAdditionalGhosts_PersonalBestGlobals_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                personalBestGlobals.Add(Deserialize_NonNullableIGetAdditionalGhosts_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData Deserialize_NonNullableIGetAdditionalGhosts_PersonalBestGlobals_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData(typename, @record: Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "record")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::TNRD.Zeepkist.GTR.State.RecordData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordData(typename, id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), user: Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")), recordMedia: Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recordMedia")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::TNRD.Zeepkist.GTR.State.UserData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.UserData(typename, steamName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "steamName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::TNRD.Zeepkist.GTR.State.RecordMediaData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RecordMedia", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordMediaData(typename, ghostUrl: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ghostUrl")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetLevelPointsBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetLevelPointsBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetLevelPointsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetLevelPointsResultInfo(Deserialize_IGetLevelPoints_LevelPoints(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "levelPoints")));
        }

        private global::TNRD.Zeepkist.GTR.State.LevelPointsConnectionData? Deserialize_IGetLevelPoints_LevelPoints(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LevelPointsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.LevelPointsConnectionData(typename, nodes: Deserialize_NonNullableIGetLevelPoints_LevelPoints_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.LevelPointData> Deserialize_NonNullableIGetLevelPoints_LevelPoints_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var levelPoints = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.LevelPointData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                levelPoints.Add(Deserialize_NonNullableIGetLevelPoints_LevelPoints_Nodes(child));
            }

            return levelPoints;
        }

        private global::TNRD.Zeepkist.GTR.State.LevelPointData Deserialize_NonNullableIGetLevelPoints_LevelPoints_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LevelPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.LevelPointData(typename, points: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "points")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _bigFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetPersonalBestBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _bigFloatParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("BigFloat") ?? throw new global::System.ArgumentException("No serializer for type `BigFloat` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetPersonalBestResultInfo(Deserialize_IGetPersonalBest_PersonalBestGlobals(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personalBestGlobals")));
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? Deserialize_IGetPersonalBest_PersonalBestGlobals(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData(typename, nodes: Deserialize_NonNullableIGetPersonalBest_PersonalBestGlobals_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData> Deserialize_NonNullableIGetPersonalBest_PersonalBestGlobals_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                personalBestGlobals.Add(Deserialize_NonNullableIGetPersonalBest_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData Deserialize_NonNullableIGetPersonalBest_PersonalBestGlobals_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData(typename, @record: Deserialize_IGetPersonalBest_PersonalBestGlobals_Nodes_Record(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "record")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::TNRD.Zeepkist.GTR.State.RecordData? Deserialize_IGetPersonalBest_PersonalBestGlobals_Nodes_Record(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordData(typename, time: Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double Deserialize_NonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestCountBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetPersonalBestCountBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestCountResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetPersonalBestCountResultInfo(Deserialize_IGetPersonalBestCount_PersonalBestGlobals(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personalBestGlobals")));
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? Deserialize_IGetPersonalBestCount_PersonalBestGlobals(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData(typename, totalCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestGhostsBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _bigFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetPersonalBestGhostsBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _bigFloatParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("BigFloat") ?? throw new global::System.ArgumentException("No serializer for type `BigFloat` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestGhostsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetPersonalBestGhostsResultInfo(Deserialize_IGetPersonalBestGhosts_PersonalBestGlobals(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personalBestGlobals")));
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData? Deserialize_IGetPersonalBestGhosts_PersonalBestGlobals(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalsConnectionData(typename, nodes: Deserialize_NonNullableIGetPersonalBestGhosts_PersonalBestGlobals_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData> Deserialize_NonNullableIGetPersonalBestGhosts_PersonalBestGlobals_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var personalBestGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                personalBestGlobals.Add(Deserialize_NonNullableIGetPersonalBestGhosts_PersonalBestGlobals_Nodes(child));
            }

            return personalBestGlobals;
        }

        private global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData Deserialize_NonNullableIGetPersonalBestGhosts_PersonalBestGlobals_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonalBestGlobal", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData(typename, @record: Deserialize_IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "record")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::TNRD.Zeepkist.GTR.State.RecordData? Deserialize_IGetPersonalBestGhosts_PersonalBestGlobals_Nodes_Record(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordData(typename, id: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), user: Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")), recordMedia: Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recordMedia")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::TNRD.Zeepkist.GTR.State.UserData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.UserData(typename, steamName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "steamName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::TNRD.Zeepkist.GTR.State.RecordMediaData? Deserialize_IGetAdditionalGhosts_PersonalBestGlobals_Nodes_Record_RecordMedia(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RecordMedia", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordMediaData(typename, ghostUrl: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ghostUrl")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPersonalBestsBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _bigFloatParser;
        public GetPersonalBestsBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _bigFloatParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("BigFloat") ?? throw new global::System.ArgumentException("No serializer for type `BigFloat` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPersonalBestsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetPersonalBestsResultInfo(Deserialize_IGetPersonalBests_Records(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "records")));
        }

        private global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? Deserialize_IGetPersonalBests_Records(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RecordsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordsConnectionData(typename, nodes: Deserialize_NonNullableIGetPersonalBests_Records_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.RecordData> Deserialize_NonNullableIGetPersonalBests_Records_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var @records = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.RecordData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @records.Add(Deserialize_NonNullableIGetPersonalBests_Records_Nodes(child));
            }

            return @records;
        }

        private global::TNRD.Zeepkist.GTR.State.RecordData Deserialize_NonNullableIGetPersonalBests_Records_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordData(typename, user: Deserialize_IGetPersonalBests_Records_Nodes_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")), time: Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::TNRD.Zeepkist.GTR.State.UserData? Deserialize_IGetPersonalBests_Records_Nodes_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.UserData(typename, steamName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "steamName")), steamId: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "steamId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double Deserialize_NonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetPlayerRankOnLevelBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetPlayerRankOnLevelBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetPlayerRankOnLevelResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetPlayerRankOnLevelResultInfo(Deserialize_IGetPlayerRankOnLevel_Records(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "records")));
        }

        private global::TNRD.Zeepkist.GTR.State.RecordsConnectionData? Deserialize_IGetPlayerRankOnLevel_Records(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RecordsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordsConnectionData(typename, totalCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetTotalUserCountBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetTotalUserCountBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetTotalUserCountResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetTotalUserCountResultInfo(Deserialize_IGetTotalUserCount_Users(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users")));
        }

        private global::TNRD.Zeepkist.GTR.State.UsersConnectionData? Deserialize_IGetTotalUserCount_Users(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UsersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.UsersConnectionData(typename, totalCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GetWorldRecordHolderBuilder : global::StrawberryShake.OperationResultBuilder<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetWorldRecordHolderBuilder(global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::TNRD.Zeepkist.GTR.IGetWorldRecordHolderResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetWorldRecordHolderResultInfo(Deserialize_IGetWorldRecordHolder_WorldRecordGlobals(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "worldRecordGlobals")));
        }

        private global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalsConnectionData? Deserialize_IGetWorldRecordHolder_WorldRecordGlobals(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("WorldRecordGlobalsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalsConnectionData(typename, nodes: Deserialize_NonNullableIGetWorldRecordHolder_WorldRecordGlobals_NodesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData> Deserialize_NonNullableIGetWorldRecordHolder_WorldRecordGlobals_NodesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var worldRecordGlobals = new global::System.Collections.Generic.List<global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                worldRecordGlobals.Add(Deserialize_NonNullableIGetWorldRecordHolder_WorldRecordGlobals_Nodes(child));
            }

            return worldRecordGlobals;
        }

        private global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData Deserialize_NonNullableIGetWorldRecordHolder_WorldRecordGlobals_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("WorldRecordGlobal", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData(typename, @record: Deserialize_IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "record")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::TNRD.Zeepkist.GTR.State.RecordData? Deserialize_IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Record", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.RecordData(typename, time: Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "time")), user: Deserialize_IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double Deserialize_NonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::TNRD.Zeepkist.GTR.State.UserData? Deserialize_IGetWorldRecordHolder_WorldRecordGlobals_Nodes_Record_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TNRD.Zeepkist.GTR.State.UserData(typename, steamName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "steamName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>A connection to a list of `PersonalBestGlobal` values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class PersonalBestGlobalsConnectionData
    {
        public PersonalBestGlobalsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>? nodes = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }
        ///<summary>A list of `PersonalBestGlobal` objects.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.PersonalBestGlobalData>? Nodes { get; }
        ///<summary>The count of *all* `PersonalBestGlobal` you could get from the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial interface INodeData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class PersonalBestGlobalData : INodeData
    {
        public PersonalBestGlobalData(global::System.String __typename, global::TNRD.Zeepkist.GTR.State.RecordData? @record = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Record = @record;
        }

        public global::System.String __typename { get; }
        ///<summary>Reads a single `Record` that is related to this `PersonalBestGlobal`.</summary>
        public global::TNRD.Zeepkist.GTR.State.RecordData? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class RecordData : INodeData
    {
        public RecordData(global::System.String __typename, global::System.Int32? id = default !, global::TNRD.Zeepkist.GTR.State.UserData? user = default !, global::TNRD.Zeepkist.GTR.State.RecordMediaData? recordMedia = default !, global::System.Double? time = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            User = user;
            RecordMedia = recordMedia;
            Time = time;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? Id { get; }
        ///<summary>Reads a single `User` that is related to this `Record`.</summary>
        public global::TNRD.Zeepkist.GTR.State.UserData? User { get; }
        ///<summary>Reads a single `RecordMedia` that is related to this `Record`.</summary>
        public global::TNRD.Zeepkist.GTR.State.RecordMediaData? RecordMedia { get; }
        public global::System.Double? Time { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class UserData : INodeData
    {
        public UserData(global::System.String __typename, global::System.String? steamName = default !, global::System.String? steamId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SteamName = steamName;
            SteamId = steamId;
        }

        public global::System.String __typename { get; }
        public global::System.String? SteamName { get; }
        public global::System.String? SteamId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class RecordMediaData : INodeData
    {
        public RecordMediaData(global::System.String __typename, global::System.String? ghostUrl = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GhostUrl = ghostUrl;
        }

        public global::System.String __typename { get; }
        public global::System.String? GhostUrl { get; }
    }

    ///<summary>A connection to a list of `LevelPoint` values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class LevelPointsConnectionData
    {
        public LevelPointsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.LevelPointData>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }
        ///<summary>A list of `LevelPoint` objects.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.LevelPointData>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class LevelPointData : INodeData
    {
        public LevelPointData(global::System.String __typename, global::System.Int32? points = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Points = points;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? Points { get; }
    }

    ///<summary>A connection to a list of `Record` values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class RecordsConnectionData
    {
        public RecordsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.RecordData>? nodes = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }
        ///<summary>A list of `Record` objects.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.RecordData>? Nodes { get; }
        ///<summary>The count of *all* `Record` you could get from the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>A connection to a list of `User` values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class UsersConnectionData
    {
        public UsersConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }
        ///<summary>The count of *all* `User` you could get from the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>A connection to a list of `WorldRecordGlobal` values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class WorldRecordGlobalsConnectionData
    {
        public WorldRecordGlobalsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }
        ///<summary>A list of `WorldRecordGlobal` objects.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TNRD.Zeepkist.GTR.State.WorldRecordGlobalData>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class WorldRecordGlobalData : INodeData
    {
        public WorldRecordGlobalData(global::System.String __typename, global::TNRD.Zeepkist.GTR.State.RecordData? @record = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Record = @record;
        }

        public global::System.String __typename { get; }
        ///<summary>Reads a single `Record` that is related to this `WorldRecordGlobal`.</summary>
        public global::TNRD.Zeepkist.GTR.State.RecordData? Record { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.3.0.0")]
    public partial class GtrClientStoreAccessor : global::StrawberryShake.IStoreAccessor
    {
        public global::StrawberryShake.IOperationStore OperationStore => throw new global::System.NotSupportedException("OperationStore is not supported in store less mode");
        public global::StrawberryShake.IEntityStore EntityStore => throw new global::System.NotSupportedException("EntityStore is not supported in store less mode");
        public global::StrawberryShake.IEntityIdSerializer EntityIdSerializer => throw new global::System.NotSupportedException("EntityIdSerializer is not supported in store less mode");

        public global::StrawberryShake.IOperationRequestFactory GetOperationRequestFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationRequestFactory is not supported in store less mode");
        }

        public global::StrawberryShake.IOperationResultDataFactory GetOperationResultDataFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationResultDataFactory is not supported in store less mode");
        }
    }
}

